# -*- coding: utf-8 -*-
# 前复权，我以这个股票最后一天的价格往前复权，如果以此为标准，那么股票很久以前的价格可能会是几分钱
# 后复权，我以这个股票上市第一天的价格往后复权
# 如果做回测的话最好用后复权价
import pandas as pd

# =====导入数据
df = pd.read_csv('sz300001.csv', encoding='gbk')
# print df
# 导入后发现是乱码，加上encoding='gbk'参数

# 格式修改，在python2中特有的，python3中无需
"""
print(df['股票代码'])  # 发现有问题，报错
print(df.columns[0], type(df.columns[0]))
print(df[u'股票代码'])  # encoding之后所有的字符串都变成了unicode格式
df.columns = [i.encode('utf8') for i in df.columns]  # 每次打u太麻烦，将unicode再变成string
print(df.columns[0], type(df.columns[0]))
"""

# 取我们需要的列，其他的列不要
df = df[['交易日期', '股票代码', '开盘价', '最高价', '最低价', '收盘价', '涨跌幅']]
# 将数据按照交易日期从小到大排序
df.sort_values(by=['交易日期'], inplace=True)

# =====计算复权价，最重要的就是涨跌幅要复权。下面考察我们的数据中的涨跌幅
df['涨跌幅2'] = df['收盘价'].pct_change()  # 通过pct_change计算基于未复权收盘价的涨跌幅
# 这里的目的是为了将pct_change计算出的收盘价和原有的收盘价进行对比
"""
            交易日期      股票代码    开盘价    最高价    最低价    收盘价       涨跌幅      涨跌幅2
1639  2009-10-30  sz300001  42.00  64.00  35.01  44.00  0.848739       NaN
1638  2009-11-02  sz300001  39.60  41.87  39.60  39.60 -0.100000 -0.100000
1637  2009-11-03  sz300001  38.20  39.36  36.15  36.90 -0.068182 -0.068182
1636  2009-11-04  sz300001  38.00  38.90  37.23  38.02  0.030352  0.030352
1635  2009-11-05  sz300001  38.03  40.98  37.51  39.60  0.041557  0.041557
1634  2009-11-06  sz300001  39.63  40.40  38.25  38.91 -0.017424 -0.017424
1633  2009-11-09  sz300001  38.65  39.90  38.18  39.48  0.014649  0.014649
1632  2009-11-10  sz300001  39.56  39.80  37.80  37.97 -0.038247 -0.038247
1631  2009-11-11  sz300001  37.65  38.40  37.00  38.22  0.006584  0.006584
1630  2009-11-12  sz300001  38.20  38.89  37.50  38.56  0.008896  0.008896
1629  2009-11-13  sz300001  38.57  41.87  38.57  40.76  0.057054  0.057054
1628  2009-11-16  sz300001  40.80  41.30  39.62  41.00  0.005888  0.005888
1627  2009-11-17  sz300001  40.90  41.82  40.55  40.90 -0.002439 -0.002439
1626  2009-11-18  sz300001  41.00  43.16  41.00  42.84  0.047433  0.047433
1625  2009-11-19  sz300001  42.90  47.10  42.72  44.91  0.048319  0.048319
1624  2009-11-20  sz300001  44.33  46.55  44.10  44.38 -0.011801 -0.011801
1623  2009-11-23  sz300001  44.33  45.98  44.12  45.41  0.023209  0.023209
1622  2009-11-24  sz300001  45.80  46.23  41.01  41.43 -0.087646 -0.087646
1621  2009-11-25  sz300001  41.13  44.19  41.10  43.90  0.059619  0.059619
1620  2009-11-26  sz300001  43.70  47.49  43.00  47.28  0.076993  0.076993
1619  2009-11-27  sz300001  46.10  48.60  45.54  47.30  0.000423  0.000423
1618  2009-11-30  sz300001  47.32  47.90  45.00  46.92 -0.008034 -0.008034
1617  2009-12-01  sz300001  46.48  47.38  45.70  46.98  0.001279  0.001279
1616  2009-12-02  sz300001  47.10  49.85  46.68  48.17  0.025330  0.025330
1615  2009-12-03  sz300001  48.01  50.24  47.19  50.16  0.041312  0.041312
1614  2009-12-04  sz300001  48.00  49.15  45.14  45.56 -0.091707 -0.091707
1613  2009-12-07  sz300001  45.30  46.52  44.60  46.32  0.016681  0.016681
1612  2009-12-08  sz300001  46.30  48.43  46.30  47.86  0.033247  0.033247
1611  2009-12-09  sz300001  47.40  49.80  47.04  48.01  0.003134  0.003134
1610  2009-12-10  sz300001  48.00  48.99  47.00  47.40 -0.012706 -0.012706
...          ...       ...    ...    ...    ...    ...       ...       ...
29    2016-11-03  sz300001  20.21  20.39  20.09  20.16 -0.006407 -0.006407
28    2016-11-04  sz300001  20.13  20.30  19.94  20.14 -0.000992 -0.000992
27    2016-11-07  sz300001  20.11  20.24  19.96  20.16  0.000993  0.000993
26    2016-11-08  sz300001  20.16  20.24  20.01  20.14 -0.000992 -0.000992
25    2016-11-09  sz300001  20.07  20.19  19.72  19.97 -0.008441 -0.008441
24    2016-11-10  sz300001  20.09  20.35  20.08  20.31  0.017026  0.017026
23    2016-11-11  sz300001  20.31  20.35  20.13  20.34  0.001477  0.001477
22    2016-11-14  sz300001  20.34  20.55  20.26  20.35  0.000492  0.000492
21    2016-11-15  sz300001  20.27  20.34  20.04  20.30 -0.002457 -0.002457
20    2016-11-16  sz300001  20.40  20.54  20.19  20.19 -0.005419 -0.005419
19    2016-11-17  sz300001  20.09  20.36  20.05  20.13 -0.002972 -0.002972
18    2016-11-18  sz300001  20.30  20.30  20.07  20.09 -0.001987 -0.001987
17    2016-11-21  sz300001  20.10  20.18  20.01  20.10  0.000498  0.000498
16    2016-11-22  sz300001  20.11  20.27  20.03  20.26  0.007960  0.007960
15    2016-11-23  sz300001  20.28  20.54  20.28  20.32  0.002962  0.002962
14    2016-11-24  sz300001  20.31  20.31  20.07  20.11 -0.010335 -0.010335
13    2016-11-25  sz300001  20.08  20.39  20.02  20.37  0.012929  0.012929
12    2016-11-28  sz300001  20.45  20.50  20.21  20.24 -0.006382 -0.006382
11    2016-11-29  sz300001  20.24  20.45  20.15  20.21 -0.001482 -0.001482
10    2016-11-30  sz300001  20.16  20.47  20.11  20.34  0.006432  0.006432
9     2016-12-01  sz300001  20.38  20.76  20.31  20.66  0.015733  0.015733
8     2016-12-02  sz300001  20.55  20.62  20.21  20.22 -0.021297 -0.021297
7     2016-12-05  sz300001  20.05  20.48  20.01  20.21 -0.000495 -0.000495
6     2016-12-06  sz300001  20.25  20.39  20.02  20.02 -0.009401 -0.009401
5     2016-12-07  sz300001  20.02  20.12  19.81  20.06  0.001998  0.001998
4     2016-12-08  sz300001  20.06  20.10  19.70  19.71 -0.017448 -0.017448
3     2016-12-09  sz300001  19.77  19.85  19.35  19.49 -0.011162 -0.011162
2     2016-12-12  sz300001  19.57  19.66  17.74  17.90 -0.081580 -0.081580
1     2016-12-13  sz300001  17.99  18.18  17.78  17.91  0.000559  0.000559
0     2016-12-14  sz300001  17.92  18.15  17.78  17.95  0.002233  0.002233
"""
print(df[abs(df['涨跌幅2'] - df['涨跌幅']) > 0.0001])  # 数据中的涨跌幅是复权后的涨跌幅，是相对准确的
# 而相应的只要涨跌幅的价格是正确的，我们就苦于通过复权后的涨跌幅可以反向求得相关数据
del df['涨跌幅2']

# =====计算复权后的收盘价
# ===计算复权因子
df['复权因子'] = (df['涨跌幅'] + 1).cumprod()
# 计算出来的复权因子的意义：我在一开始投入1元买这个股票，最后的收益是多少，资金曲线是什么样子的。
# 如果要计算投入100万买入这个股票，资金曲线是什么样子的，df['复权因子'] * 100万即可

# ===后复权收盘价，等于用该股票上市价格的钱，买入该股票后的资金曲线。以一只股票上市第一天的收盘价向后复权
initial_price = df.iloc[0]['收盘价'] / (1 + df.iloc[0]['涨跌幅'])  # 计算上市价格
df['收盘价_后复权'] = initial_price * df['复权因子']  # 相乘得到复权价

# ===如果计算复权的开盘价、最高价、最低价？
# 根据如下公式计算：'开盘价_复权' / '收盘价_复权' = '开盘价' / '收盘价'
df['开盘价_后复权'] = df['开盘价'] / df['收盘价'] * df['收盘价_后复权']
df['最高价_后复权'] = df['最高价'] / df['收盘价'] * df['收盘价_后复权']
df['最低价_后复权'] = df['最低价'] / df['收盘价'] * df['收盘价_后复权']
print(df)

# ===计算前复权价格
# 作为本周作业

# =====导出数据
df.to_csv('output_fuquan_sz300001.csv')
df.to_csv('output_fuquan_sz300001.csv',
          index=False,
          mode='w',  # mode='w'代表覆盖之前的文件，mode='a'，代表接在原来数据的末尾
          float_format='%.15f',  # 控制输出浮点数的精度
          header=None,  # 不输出表头
          )
